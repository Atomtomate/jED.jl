# ==================================================================================================== #
#                                            mu_scan.jl                                                #
# ---------------------------------------------------------------------------------------------------- #
#   Authors         : Julian Stobbe                                                                    #
# ----------------------------------------- Description ---------------------------------------------- #
#   Runs through a range of mu values and computes DMFT soutions.                                      #
#   Returns: DataFrame with U, β, KGridStr, Nk, NBathSites, μ, n, AndParCheck1, ..., AndparCheck4,     #
#              eps_l, ..., V_l, ..., fit_converged_flag                                                #
#   Arguments:                                                                                         #
#      (1) : `Int`    : Number of bath sites                                                           #
#      (2) : `Float64`: μ range start                                                                  #
#      (3) : `Float64`: μ range stop                                                                   #
#      (4) : `Int`    : number of μ steps                                                              #
#      (5) : `Float64`: Hubbard U                                                                      #
#      (6) : `Float64`: inverse temperature β                                                          #
#      (7) : `String` : KGrid string (see Dispersions.jl)                                              #
#      (8) : `Int`    : Number of k-points in each dimension                                           #
#      (9) : `Int`    : Numver of positive fermionic Matsubara frequencies                             #
#     (10) : `Float64`: U for Anderson start (i.e. start scan in MI or Metal)                          #
# -------------------------------------------- TODO -------------------------------------------------- #
# ==================================================================================================== #

using Pkg
Pkg.activate(joinpath(@__DIR__,".."))
using jED
using ForwardDiff
using Optim
using TimerOutputs
using DataFrames, CSV



NSites = parse(Int,ARGS[1])
μ_range = LinRange(parse(Float64,ARGS[2]),parse(Float64,ARGS[3]), parse(Int,ARGS[4]))
U  = parse(Float64,ARGS[5])
β  = parse(Float64,ARGS[6])
kGstr = ARGS[7]
Nk = parse(Int, ARGS[8])
Nν = parse(Int, ARGS[9])
UStart = parse(Float64, ARGS[10])
# push!(ARGS, ["5", "0.5","1.0", "100", "3.0", "40.0", "2Dsc-0.25-0.075-0.05", "200", "2000", "0.1"]...)
head = "╔═════════════════════ SETUP ════════════════════════╗"
rpl = length(head)-1
println(head)
println(rpad("║       U              = $U",rpl," ")          *"║")
println(rpad("║       β              = $β",rpl," ")          *"║")
println(rpad("║       Bath Sites     = $NSites",rpl," ")     *"║")
println(rpad("║       kGrid          = $kGstr [$Nk]",rpl," ")*"║")
println(rpad("║       Nν             = $Nν",rpl," ")         *"║")
println(     "╚"*repeat("═",rpl-1)                           *"╝")
df = DataFrame(U=Float64[], β=Float64[], kGstr=String[], Nk=Int[], NBathSites=Int[], μ=Float64[], n=Float64[], DMFT_Converged=Bool[], Fit_Converged=Bool[], min_epsk_diff=Float64[], min_Vk=Float64[], min_eps=Float64[], sum_Vk=Float64[], eps_l=[], v_l=[])


function andpar_check_values(ϵₖ, Vₖ)
    NSites = length(ϵₖ)
    min_epsk_diff = Inf
    min_Vₖ = minimum(abs.(Vₖ))
    min_eps = minimum(abs.(ϵₖ))
    sum_vk = sum(Vₖ .^ 2)
    for i in 1:NSites
        for j in i+1:NSites
            if abs(ϵₖ[i] - ϵₖ[j]) < min_epsk_diff
                min_epsk_diff = abs(ϵₖ[i] - ϵₖ[j])
            end
        end
    end
    return sum_vk, min_epsk_diff, min_Vₖ, min_eps
end

function run_DMFT(resDF, kGstr::String, Nk::Int, Nν::Int, NSites::Int, U::Float64, μ_in::Float64, β::Float64, fitf::Function; minit = 10, maxit = 2000, eps_abs::Float64=1e-13,
            ϵₖ = vcat(randn(trunc(Int,NSites/2)) .* U .+ U,  randn(trunc(Int,NSites/2)) .* U .- U,  repeat([0.2], NSites%2)),
            Vₖ = randn(NSites) ./ 100.0 .+ 0.17)
    α   = 0.8
    kG     = jED.gen_kGrid(kGstr,Nk) #"3Dsc-$tsc", Nk)
    νnGrid = jED.OffsetVector([1im * (2*n+1)*π/β for n in 0:Nν-1], 0:Nν-1)
    basis  = jED.Basis(NSites+1);
    overlap= Overlap(basis, create_op(basis, 1)) # optional

    p  = AIMParams(ϵₖ, Vₖ)
    dens = NaN

    GImp_i = nothing
    GImp_i_old = nothing
    ΣImp_i = nothing
    fit_res = nothing
    fit_err = NaN
    converged = false
    μ = μ_in
    it_check = -1
    for i in 1:maxit
        model  = AIM(p.ϵₖ, p.Vₖ, μ, U)
        G0W    = GWeiss(νnGrid, μ, p)
        es     = Eigenspace(model, basis, verbose=false);
        isnothing(GImp_i_old) ? GImp_i_old = deepcopy(GImp_i) : copyto!(GImp_i_old, GImp_i)
        GImp_i, dens = calc_GF_1(basis, es, νnGrid, β, ϵ_cut=1e-13, overlap=overlap, with_density=true) #1e-13
        !isnothing(GImp_i_old) && (GImp_i = α .* GImp_i .+ (1-α) .* GImp_i_old)
        !isnothing(GImp_i_old) && sum(abs.(GImp_i_old .- GImp_i)) < eps_abs && (converged = true)
        ΣImp_i = Σ_from_GImp(G0W, GImp_i)
        GLoc_i = GLoc(ΣImp_i, μ, νnGrid, kG)
        fit_res = fitf(p, μ, GLoc_i, νnGrid)
        vals = Optim.converged(fit_res) ? Optim.minimizer(fit_res) : nothing
        isnothing(vals) && (@warn("Could not fit, aborting DMFT loop!"); break)
        p = AIMParams(vals[1:NSites], vals[NSites+1:end])

        tmp = 1 ./ (νnGrid.parent .+ μ .- sum((p.Vₖ .^ 2) ./ (reshape(νnGrid.parent,1,length(νnGrid)) .- p.ϵₖ), dims=1)[1,:])
        fit_err = sum(abs.(GLoc_i.parent .- tmp))
        it_check = i
        i > minit && converged && break
    end

    vals = Optim.converged(fit_res) ? Optim.minimizer(fit_res) : nothing
    row = if !isnothing(vals)
        sum_vk, min_eps_diff, min_vk, min_eps = andpar_check_values(vals[1:NSites], vals[NSites+1:end])
        println(rpad("=========== μ = $μ , dens = $dens  =========",80,"="))
        println("   Converged = ", Optim.converged(fit_res), ", after $it_check iterations")
        println("       Error = ", fit_err, " // Error after trafo = ", Optim.minimum(fit_res))
        println("   1. min(|Vₖ|)      = ", min_vk)
        println("   2. ∑Vₗ^2          = ", sum_vk)
        println("   3. min(|ϵₖ|)      = ", min_eps)
        println("   4. min(|ϵₖ - ϵₗ|) = ", min_eps_diff)
        println("   Solution :    ϵₖ = $(lpad.(round.(vals[1:NSites],digits=4),9)...)")
        println("                 Vₖ = $(lpad.(round.(vals[NSites+1:end],digits=4),9)...)")
        println(repeat("=",80))
        [U, β, kGstr, Nk, NSites, μ, dens, converged, !isnothing(vals), min_eps_diff, min_vk, min_eps, sum_vk, vals[1:NSites], vals[NSites+1:end]]
    else
        println(rpad("=========== μ = $μ , dens = $dens =========",80,"="))
        println("   ERROR: DID NOT CONVERGE!")
        println(repeat("=",80))
        [U, β, kGstr, Nk, NSites, μ, dens, converged, !isnothing(vals), repeat([NaN], 4)..., Float64[], Float64[]]
    end
    push!(resDF, row)

    return !isnothing(vals) ? (vals[1:NSites], vals[NSites+1:end]) : (nothing, nothing)
end



function run_scan!(resDF, kGstr::String, Nk::Int, Nν::Int, NSites::Int, U::Float64, μ_range::AbstractVector, β::Float64; maxit = 5000)
    cf(x, y) = y #1 ./ (y .* sqrt.(abs.(x)))
    cf2(x, y) = 1 ./ (y .* sqrt.(abs.(x)))
    opt = LBFGS()
    opts  = Optim.Options(iterations=20000, f_tol=1e-9, x_tol=1e-9,
                            store_trace = false,
                             show_trace = false,
                             show_warnings = true)
    dist_f(x)  = sum(x .^ 2)

    function fitf(pAIM::AIMParams, μ, GLoc_i, νnGrid)
        p0 = vcat(pAIM.ϵₖ, pAIM.Vₖ)
        function wrap_cost(p::Vector)
            GW_i = cf(νnGrid.parent, 1 ./ (νnGrid.parent .+ μ .- sum((p[NSites+1:end] .^ 2) ./ (reshape(νnGrid.parent,1,length(νnGrid)) .- p[1:NSites]), dims=1)[1,:]))
            GW_i = vcat(real(GW_i),imag(GW_i))
            GL_i = cf(νnGrid.parent, GLoc_i.parent)
            GL_i = vcat(real(GL_i),imag(GL_i))
            return dist_f(GL_i .- GW_i)
        end
        result = optimize(wrap_cost, p0, opt, opts; autodiff = :forward)
        return result
    end
    e_l, v_l = run_DMFT(resDF, kGstr, Nk, Nν, NSites, UStart, UStart/2.0, β, fitf; maxit = maxit)
    for (i,μ_i) in enumerate(μ_range)
        println("μ scan μ=$μ_i [$i/$(length(μ_range))]")
        if isnothing(e_l) 
            e_l, v_l = run_DMFT(resDF, kGstr, Nk, Nν, NSites, U, μ_i, β, fitf; maxit = maxit)
        else
            e_l, v_l = run_DMFT(resDF, kGstr, Nk, Nν, NSites, U, μ_i, β, fitf; maxit = maxit, ϵₖ = e_l, Vₖ = v_l)
        end
    end


    return nothing
end
μ_range = sort(union(LinRange(0.75, 0.965, 30), LinRange(0.969, 0.995, 10)))
μ_range = reverse_mu ? reverse(μ_range) : μ_range

run_scan!(df, kGstr, Nk, Nν, NSites, U, μ_range, β; maxit = 2000)
κ_pre = (df.n[2:end] .- df.n[1:end-1]) ./ (df.μ[2:end] .- df.μ[1:end-1])
n_axis = (df.n[2:end] .+ df.n[1:end-1]) ./ 2
κ = (1 ./ n_axis .^ 2) .* κ_pre;

CSV.write("NB_4.csv", df)